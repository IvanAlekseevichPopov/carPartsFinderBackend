<?php

declare(strict_types=1);

namespace App\Admin;

use App\Entity\File\Image;
use App\Entity\File\PartImage;
use League\Flysystem\FilesystemException;
use League\Flysystem\FilesystemOperator;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Route\RouteCollectionInterface;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Validator\Constraints\Range;

class ImageAdmin extends AbstractAdmin
{
    private FilesystemOperator $operator;

    private TokenStorageInterface $tokenStorage;

    public function setFileSystemOperator(FilesystemOperator $operator)
    {
        $this->operator = $operator;
    }

    public function setTokenStorage(TokenStorageInterface $tokenStorage): void
    {
        $this->tokenStorage = $tokenStorage;
    }

    /**
     * @throws FilesystemException
     */
    public function preRemove(object $object): void
    {
        if ($object instanceof Image) {
            $this->operator->delete($object->getStorageFilePath());
        }
    }

    public function configureRoutes(RouteCollectionInterface $collection): void
    {
        $collection->remove('create');
        parent::configureRoutes($collection); // TODO: Change the autogenerated stub
    }

//    public function postPersist(object $object): void
//    {
//        parent::prePersist($object);
//        if ($object instanceof PartImage && $object->getFile() !== null) {
//            $this->sendImageToStorage($object);
//        }
//    }
//
//    public function postUpdate(object $object): void
//    {
//        parent::preUpdate($object);
//        if ($object instanceof PartImage && $object->getFile() !== null) {
//            $this->sendImageToStorage($object);
//        }
//
//    }
//
//    private function sendImageToStorage(PartImage $image): void
//    {
//        dump($image);
//        $this->operator->writeStream(
//            $image->getStorageFilePath(),
//            fopen($image->getFile()->getRealPath(), 'r')
//        );
//    }

    protected function configureFormFields(FormMapper $form): void
    {
        $form
            ->add('rating', NumberType::class, [
                'constraints' => [
                    new Range(['min' => 0, 'max' => 500]),
                ],
            ])
            ->add('file', FileType::class, [
            ])
        ;
    }

    protected function configureListFields(ListMapper $list): void
    {
        $list
            ->add('id')
            ->add('part', null, [
                'associated_property' => 'partName.name',
            ])
            ->add('rating')
            ->add(ListMapper::NAME_ACTIONS, null, [
                'actions' => [
                    'edit' => [],
                    'delete' => [],
                ],
            ]);
    }
}
